// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streaming_service.sql

package db

import (
	"context"
)

const createStreamingService = `-- name: CreateStreamingService :one
INSERT INTO streaming_services (
    name
) VALUES (
    $1
)
RETURNING service_id, name, logo_path
`

func (q *Queries) CreateStreamingService(ctx context.Context, name string) (StreamingServices, error) {
	row := q.db.QueryRow(ctx, createStreamingService, name)
	var i StreamingServices
	err := row.Scan(&i.ServiceID, &i.Name, &i.LogoPath)
	return i, err
}

const deleteStreamingService = `-- name: DeleteStreamingService :exec
DELETE FROM streaming_services
WHERE service_id = $1
`

func (q *Queries) DeleteStreamingService(ctx context.Context, serviceID int32) error {
	_, err := q.db.Exec(ctx, deleteStreamingService, serviceID)
	return err
}

const getStreamingService = `-- name: GetStreamingService :one
SELECT service_id, name, logo_path FROM streaming_services
WHERE service_id = $1 LIMIT 1
`

func (q *Queries) GetStreamingService(ctx context.Context, serviceID int32) (StreamingServices, error) {
	row := q.db.QueryRow(ctx, getStreamingService, serviceID)
	var i StreamingServices
	err := row.Scan(&i.ServiceID, &i.Name, &i.LogoPath)
	return i, err
}

const listStreamingServices = `-- name: ListStreamingServices :many
SELECT service_id, name, logo_path FROM streaming_services
ORDER BY service_id
LIMIT $1
OFFSET $2
`

type ListStreamingServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStreamingServices(ctx context.Context, arg ListStreamingServicesParams) ([]StreamingServices, error) {
	rows, err := q.db.Query(ctx, listStreamingServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StreamingServices
	for rows.Next() {
		var i StreamingServices
		if err := rows.Scan(&i.ServiceID, &i.Name, &i.LogoPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStreamingService = `-- name: UpdateStreamingService :one
UPDATE streaming_services
SET 
    name = COALESCE($2, name)
WHERE service_id = $1
RETURNING service_id, name, logo_path
`

type UpdateStreamingServiceParams struct {
	ServiceID int32  `json:"service_id"`
	Name      string `json:"name"`
}

func (q *Queries) UpdateStreamingService(ctx context.Context, arg UpdateStreamingServiceParams) (StreamingServices, error) {
	row := q.db.QueryRow(ctx, updateStreamingService, arg.ServiceID, arg.Name)
	var i StreamingServices
	err := row.Scan(&i.ServiceID, &i.Name, &i.LogoPath)
	return i, err
}
