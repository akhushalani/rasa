// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comparison.sql

package db

import (
	"context"
)

const createComparison = `-- name: CreateComparison :one
INSERT INTO comparisons (
    user_id, base_movie_id, compared_movie_id, preference
) VALUES (
    $1, $2, $3, $4
)
RETURNING comparison_id, user_id, base_movie_id, compared_movie_id, preference, created_at
`

type CreateComparisonParams struct {
	UserID          int32 `json:"user_id"`
	BaseMovieID     int32 `json:"base_movie_id"`
	ComparedMovieID int32 `json:"compared_movie_id"`
	Preference      int16 `json:"preference"`
}

func (q *Queries) CreateComparison(ctx context.Context, arg CreateComparisonParams) (Comparisons, error) {
	row := q.db.QueryRow(ctx, createComparison,
		arg.UserID,
		arg.BaseMovieID,
		arg.ComparedMovieID,
		arg.Preference,
	)
	var i Comparisons
	err := row.Scan(
		&i.ComparisonID,
		&i.UserID,
		&i.BaseMovieID,
		&i.ComparedMovieID,
		&i.Preference,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComparison = `-- name: DeleteComparison :exec
DELETE FROM comparisons
WHERE comparison_id = $1
`

func (q *Queries) DeleteComparison(ctx context.Context, comparisonID int32) error {
	_, err := q.db.Exec(ctx, deleteComparison, comparisonID)
	return err
}

const getComparison = `-- name: GetComparison :one
SELECT comparison_id, user_id, base_movie_id, compared_movie_id, preference, created_at FROM comparisons
WHERE comparison_id = $1 LIMIT 1
`

func (q *Queries) GetComparison(ctx context.Context, comparisonID int32) (Comparisons, error) {
	row := q.db.QueryRow(ctx, getComparison, comparisonID)
	var i Comparisons
	err := row.Scan(
		&i.ComparisonID,
		&i.UserID,
		&i.BaseMovieID,
		&i.ComparedMovieID,
		&i.Preference,
		&i.CreatedAt,
	)
	return i, err
}

const updateComparison = `-- name: UpdateComparison :one
UPDATE comparisons
SET 
    preference = COALESCE($2, preference)
WHERE comparison_id = $1
RETURNING comparison_id, user_id, base_movie_id, compared_movie_id, preference, created_at
`

type UpdateComparisonParams struct {
	ComparisonID int32 `json:"comparison_id"`
	Preference   int16 `json:"preference"`
}

func (q *Queries) UpdateComparison(ctx context.Context, arg UpdateComparisonParams) (Comparisons, error) {
	row := q.db.QueryRow(ctx, updateComparison, arg.ComparisonID, arg.Preference)
	var i Comparisons
	err := row.Scan(
		&i.ComparisonID,
		&i.UserID,
		&i.BaseMovieID,
		&i.ComparedMovieID,
		&i.Preference,
		&i.CreatedAt,
	)
	return i, err
}
