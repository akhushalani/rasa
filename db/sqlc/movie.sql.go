// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	decimal "github.com/shopspring/decimal"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    tmdb_id, imdb_id, title, overview, release_date, poster_path, backdrop_path, tmdb_popularity
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING movie_id, tmdb_id, imdb_id, title, overview, release_date, poster_path, backdrop_path, tmdb_popularity, last_updated
`

type CreateMovieParams struct {
	TmdbID         int32           `json:"tmdb_id"`
	ImdbID         pgtype.Text     `json:"imdb_id"`
	Title          string          `json:"title"`
	Overview       pgtype.Text     `json:"overview"`
	ReleaseDate    pgtype.Date     `json:"release_date"`
	PosterPath     pgtype.Text     `json:"poster_path"`
	BackdropPath   pgtype.Text     `json:"backdrop_path"`
	TmdbPopularity decimal.Decimal `json:"tmdb_popularity"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movies, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.TmdbID,
		arg.ImdbID,
		arg.Title,
		arg.Overview,
		arg.ReleaseDate,
		arg.PosterPath,
		arg.BackdropPath,
		arg.TmdbPopularity,
	)
	var i Movies
	err := row.Scan(
		&i.MovieID,
		&i.TmdbID,
		&i.ImdbID,
		&i.Title,
		&i.Overview,
		&i.ReleaseDate,
		&i.PosterPath,
		&i.BackdropPath,
		&i.TmdbPopularity,
		&i.LastUpdated,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE movie_id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, movieID int32) error {
	_, err := q.db.Exec(ctx, deleteMovie, movieID)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT movie_id, tmdb_id, imdb_id, title, overview, release_date, poster_path, backdrop_path, tmdb_popularity, last_updated FROM movies
WHERE movie_id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, movieID int32) (Movies, error) {
	row := q.db.QueryRow(ctx, getMovie, movieID)
	var i Movies
	err := row.Scan(
		&i.MovieID,
		&i.TmdbID,
		&i.ImdbID,
		&i.Title,
		&i.Overview,
		&i.ReleaseDate,
		&i.PosterPath,
		&i.BackdropPath,
		&i.TmdbPopularity,
		&i.LastUpdated,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT movie_id, tmdb_id, imdb_id, title, overview, release_date, poster_path, backdrop_path, tmdb_popularity, last_updated FROM movies
ORDER BY movie_id
LIMIT $1
OFFSET $2
`

type ListMoviesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movies, error) {
	rows, err := q.db.Query(ctx, listMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movies
	for rows.Next() {
		var i Movies
		if err := rows.Scan(
			&i.MovieID,
			&i.TmdbID,
			&i.ImdbID,
			&i.Title,
			&i.Overview,
			&i.ReleaseDate,
			&i.PosterPath,
			&i.BackdropPath,
			&i.TmdbPopularity,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET 
    tmdb_id = COALESCE($2, tmdb_id), 
    imdb_id = COALESCE($3, imdb_id), 
    title = COALESCE($4, title), 
    overview = COALESCE($5, overview), 
    release_date = COALESCE($6, release_date), 
    poster_path = COALESCE($7, poster_path), 
    backdrop_path = COALESCE($8, backdrop_path), 
    tmdb_popularity = COALESCE($9, tmdb_popularity), 
    last_updated = CURRENT_TIMESTAMP
WHERE movie_id = $1
RETURNING movie_id, tmdb_id, imdb_id, title, overview, release_date, poster_path, backdrop_path, tmdb_popularity, last_updated
`

type UpdateMovieParams struct {
	MovieID        int32           `json:"movie_id"`
	TmdbID         int32           `json:"tmdb_id"`
	ImdbID         pgtype.Text     `json:"imdb_id"`
	Title          string          `json:"title"`
	Overview       pgtype.Text     `json:"overview"`
	ReleaseDate    pgtype.Date     `json:"release_date"`
	PosterPath     pgtype.Text     `json:"poster_path"`
	BackdropPath   pgtype.Text     `json:"backdrop_path"`
	TmdbPopularity decimal.Decimal `json:"tmdb_popularity"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movies, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.MovieID,
		arg.TmdbID,
		arg.ImdbID,
		arg.Title,
		arg.Overview,
		arg.ReleaseDate,
		arg.PosterPath,
		arg.BackdropPath,
		arg.TmdbPopularity,
	)
	var i Movies
	err := row.Scan(
		&i.MovieID,
		&i.TmdbID,
		&i.ImdbID,
		&i.Title,
		&i.Overview,
		&i.ReleaseDate,
		&i.PosterPath,
		&i.BackdropPath,
		&i.TmdbPopularity,
		&i.LastUpdated,
	)
	return i, err
}
