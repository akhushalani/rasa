// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie_person.sql

package db

import (
	"context"
)

const createMoviePerson = `-- name: CreateMoviePerson :one
INSERT INTO movie_people (
    movie_id, person_id, role
) VALUES (
    $1, $2, $3
)
RETURNING movie_id, person_id, role
`

type CreateMoviePersonParams struct {
	MovieID  int32  `json:"movie_id"`
	PersonID int32  `json:"person_id"`
	Role     string `json:"role"`
}

func (q *Queries) CreateMoviePerson(ctx context.Context, arg CreateMoviePersonParams) (MoviePeople, error) {
	row := q.db.QueryRow(ctx, createMoviePerson, arg.MovieID, arg.PersonID, arg.Role)
	var i MoviePeople
	err := row.Scan(&i.MovieID, &i.PersonID, &i.Role)
	return i, err
}

const deleteMoviePerson = `-- name: DeleteMoviePerson :exec
DELETE FROM movie_people
WHERE movie_id = $1 AND person_id = $2
`

type DeleteMoviePersonParams struct {
	MovieID  int32 `json:"movie_id"`
	PersonID int32 `json:"person_id"`
}

func (q *Queries) DeleteMoviePerson(ctx context.Context, arg DeleteMoviePersonParams) error {
	_, err := q.db.Exec(ctx, deleteMoviePerson, arg.MovieID, arg.PersonID)
	return err
}

const getMoviesByPersonID = `-- name: GetMoviesByPersonID :many
SELECT movie_id, person_id, role FROM movie_people
WHERE person_id = $1
ORDER BY movie_id
LIMIT $2
OFFSET $3
`

type GetMoviesByPersonIDParams struct {
	PersonID int32 `json:"person_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetMoviesByPersonID(ctx context.Context, arg GetMoviesByPersonIDParams) ([]MoviePeople, error) {
	rows, err := q.db.Query(ctx, getMoviesByPersonID, arg.PersonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviePeople
	for rows.Next() {
		var i MoviePeople
		if err := rows.Scan(&i.MovieID, &i.PersonID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeopleByMovieID = `-- name: GetPeopleByMovieID :many
SELECT movie_id, person_id, role FROM movie_people
WHERE movie_id = $1
ORDER BY person_id
LIMIT $2
OFFSET $3
`

type GetPeopleByMovieIDParams struct {
	MovieID int32 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetPeopleByMovieID(ctx context.Context, arg GetPeopleByMovieIDParams) ([]MoviePeople, error) {
	rows, err := q.db.Query(ctx, getPeopleByMovieID, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviePeople
	for rows.Next() {
		var i MoviePeople
		if err := rows.Scan(&i.MovieID, &i.PersonID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
