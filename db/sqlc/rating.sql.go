// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rating.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (
    movie_id, user_id, rating_score
) VALUES (
    $1, $2, $3
)
RETURNING rating_id, user_id, movie_id, rating_score, last_updated
`

type CreateRatingParams struct {
	MovieID     int32          `json:"movie_id"`
	UserID      int32          `json:"user_id"`
	RatingScore pgtype.Numeric `json:"rating_score"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Ratings, error) {
	row := q.db.QueryRow(ctx, createRating, arg.MovieID, arg.UserID, arg.RatingScore)
	var i Ratings
	err := row.Scan(
		&i.RatingID,
		&i.UserID,
		&i.MovieID,
		&i.RatingScore,
		&i.LastUpdated,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM ratings
WHERE movie_id = $1 AND user_id = $2
`

type DeleteRatingParams struct {
	MovieID int32 `json:"movie_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) DeleteRating(ctx context.Context, arg DeleteRatingParams) error {
	_, err := q.db.Exec(ctx, deleteRating, arg.MovieID, arg.UserID)
	return err
}

const getRating = `-- name: GetRating :one
SELECT rating_id, user_id, movie_id, rating_score, last_updated FROM ratings
WHERE movie_id = $1 AND user_id = $2
LIMIT 1
`

type GetRatingParams struct {
	MovieID int32 `json:"movie_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) GetRating(ctx context.Context, arg GetRatingParams) (Ratings, error) {
	row := q.db.QueryRow(ctx, getRating, arg.MovieID, arg.UserID)
	var i Ratings
	err := row.Scan(
		&i.RatingID,
		&i.UserID,
		&i.MovieID,
		&i.RatingScore,
		&i.LastUpdated,
	)
	return i, err
}

const updateRating = `-- name: UpdateRating :one
UPDATE ratings
SET 
    rating_score = COALESCE($3, rating_score),
    last_updated = CURRENT_TIMESTAMP
WHERE movie_id = $1 AND user_id = $2
RETURNING rating_id, user_id, movie_id, rating_score, last_updated
`

type UpdateRatingParams struct {
	MovieID     int32          `json:"movie_id"`
	UserID      int32          `json:"user_id"`
	RatingScore pgtype.Numeric `json:"rating_score"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) (Ratings, error) {
	row := q.db.QueryRow(ctx, updateRating, arg.MovieID, arg.UserID, arg.RatingScore)
	var i Ratings
	err := row.Scan(
		&i.RatingID,
		&i.UserID,
		&i.MovieID,
		&i.RatingScore,
		&i.LastUpdated,
	)
	return i, err
}
