// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    password_hash
) VALUES (
    $1, $2, $3
)
RETURNING user_id, name, email, password_hash, created_at
`

type CreateUserParams struct {
	Name         pgtype.Text `json:"name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.PasswordHash)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT 
    user_id, 
    name, 
    email, 
    password_hash, 
    created_at 
FROM users 
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    name = COALESCE($2, name),
    email = COALESCE($3, email),
    password_hash = COALESCE($4, password_hash)
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID       int32       `json:"user_id"`
	Name         pgtype.Text `json:"name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}
