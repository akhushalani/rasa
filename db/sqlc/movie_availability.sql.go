// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie_availability.sql

package db

import (
	"context"
)

const createMovieAvailability = `-- name: CreateMovieAvailability :one
INSERT INTO movie_availability (
    movie_id, 
    service_id
) VALUES (
    $1, $2
)
RETURNING movie_id, service_id
`

type CreateMovieAvailabilityParams struct {
	MovieID   int32 `json:"movie_id"`
	ServiceID int32 `json:"service_id"`
}

func (q *Queries) CreateMovieAvailability(ctx context.Context, arg CreateMovieAvailabilityParams) (MovieAvailability, error) {
	row := q.db.QueryRow(ctx, createMovieAvailability, arg.MovieID, arg.ServiceID)
	var i MovieAvailability
	err := row.Scan(&i.MovieID, &i.ServiceID)
	return i, err
}

const deleteMovieAvailability = `-- name: DeleteMovieAvailability :exec
DELETE FROM movie_availability
WHERE movie_id = $1 AND service_id = $2
`

type DeleteMovieAvailabilityParams struct {
	MovieID   int32 `json:"movie_id"`
	ServiceID int32 `json:"service_id"`
}

func (q *Queries) DeleteMovieAvailability(ctx context.Context, arg DeleteMovieAvailabilityParams) error {
	_, err := q.db.Exec(ctx, deleteMovieAvailability, arg.MovieID, arg.ServiceID)
	return err
}

const getMovieAvailabilities = `-- name: GetMovieAvailabilities :many
SELECT movie_id, service_id FROM movie_availability
WHERE movie_id = $1
ORDER BY service_id
LIMIT $2
OFFSET $3
`

type GetMovieAvailabilitiesParams struct {
	MovieID int32 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetMovieAvailabilities(ctx context.Context, arg GetMovieAvailabilitiesParams) ([]MovieAvailability, error) {
	rows, err := q.db.Query(ctx, getMovieAvailabilities, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MovieAvailability
	for rows.Next() {
		var i MovieAvailability
		if err := rows.Scan(&i.MovieID, &i.ServiceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
