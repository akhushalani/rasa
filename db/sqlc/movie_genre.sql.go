// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie_genre.sql

package db

import (
	"context"
)

const createMovieGenre = `-- name: CreateMovieGenre :one
INSERT INTO movie_genres (
    movie_id, genre_id
) VALUES (
    $1, $2
)
RETURNING movie_id, genre_id
`

type CreateMovieGenreParams struct {
	MovieID int32 `json:"movie_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) CreateMovieGenre(ctx context.Context, arg CreateMovieGenreParams) (MovieGenres, error) {
	row := q.db.QueryRow(ctx, createMovieGenre, arg.MovieID, arg.GenreID)
	var i MovieGenres
	err := row.Scan(&i.MovieID, &i.GenreID)
	return i, err
}

const deleteMovieGenre = `-- name: DeleteMovieGenre :exec
DELETE FROM movie_genres
WHERE movie_id = $1 AND genre_id = $2
`

type DeleteMovieGenreParams struct {
	MovieID int32 `json:"movie_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) DeleteMovieGenre(ctx context.Context, arg DeleteMovieGenreParams) error {
	_, err := q.db.Exec(ctx, deleteMovieGenre, arg.MovieID, arg.GenreID)
	return err
}

const getMovieGenre = `-- name: GetMovieGenre :one
SELECT movie_id, genre_id FROM movie_genres
WHERE movie_id = $1 AND genre_id = $2
LIMIT 1
`

type GetMovieGenreParams struct {
	MovieID int32 `json:"movie_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) GetMovieGenre(ctx context.Context, arg GetMovieGenreParams) (MovieGenres, error) {
	row := q.db.QueryRow(ctx, getMovieGenre, arg.MovieID, arg.GenreID)
	var i MovieGenres
	err := row.Scan(&i.MovieID, &i.GenreID)
	return i, err
}

const listMovieGenres = `-- name: ListMovieGenres :many
SELECT movie_id, genre_id FROM movie_genres
ORDER BY movie_id
LIMIT $1
OFFSET $2
`

type ListMovieGenresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMovieGenres(ctx context.Context, arg ListMovieGenresParams) ([]MovieGenres, error) {
	rows, err := q.db.Query(ctx, listMovieGenres, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MovieGenres
	for rows.Next() {
		var i MovieGenres
		if err := rows.Scan(&i.MovieID, &i.GenreID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
